apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'idea'

apply plugin: 'checkstyle' //for java code conventions
apply plugin: 'jdepend' //for dependency analysis
apply plugin: 'findbugs' //for static code analysis
apply plugin: 'pmd'

defaultTasks 'clean', 'build'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

project.ext {
    //App Config
    appConfigUrl = new URL("file:///${projectDir}/AppConfig.groovy")
    appConfig = new ConfigSlurper('configuration').parse(appConfigUrl).configuration
    manifest = appConfig.product.distribution.jar.manifest.details
    project.archivesBaseName = appConfig.product.distribution.name
    previousArchiveName = appConfig.product.distribution.previousArchiveName

    //libs
    mongoDriver = 'org.mongodb:mongo-java-driver:2.11.3'
    groovy = 'org.codehaus.groovy:groovy-all:2.1.8'
    scala = 'org.scala-lang:scala-library:2.10.2'
    junit = 'junit:junit:4.8.1'
    mockito = 'org.mockito:mockito-all:1.9.5'
    specs2 = 'org.specs2:specs2_2.10:2.2.2'
    spock = 'org.spockframework:spock-core:0.7-groovy-2.0'

    //for scala style plugin
//    scalaStylePlugin = 'org.github.mansur.scalastyle:gradle-scalastyle-plugin_2.10:0.3'
    scalaStyle = 'org.scalastyle:scalastyle_2.10:0.3.2'
    scalaStyleReportsDirName = "$reporting.baseDir/scalastyle"

    //dependency analysis
    jdepend = 'jdepend:jdepend:2.9.1'

    //Distribution settings
    distsTemplateDir = 'distribution-template'
    distsBinDirName = "$distsDir/bin"
}

repositories {
    mavenCentral()
    maven {
        url 'http://code.google.com/p/google-maven-repository'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    compile(project.ext.mongoDriver, project.ext.groovy, project.ext.scala, project.ext.scalaStyle)
    testCompile(project.ext.junit, project.ext.specs2, project.ext.mockito, project.ext.spock)
}

jar {
    manifest {
        attributes.putAll(project.ext.manifest)
    }

    doLast {
        copy {
            from (configurations.compile.asPath.split(File.pathSeparator))
            into "$libsDir"
        }
    }
}

//FindBugs Configuration
findbugs {
    toolVersion = '2.0.2'
    reportsDir = file("$reporting.baseDir/findbugs")
    effort = "max"
    reportLevel = "high"
}

tasks.withType(FindBugs) {
    excludeFilter = file("${projectDir}/tools-config/findbugs/excludeFilter.xml")
}

findbugsTest.enabled = false

//CheckStyle Configuration
checkstyle {
   configFile = file("${projectDir}/tools-config/checkstyle/checkstyle.xml")
}

checkstyleTest {
    exclude('**/*/*Specs.java')
}

//Scala Style task
task scalastyle(description: 'Run scalaStyle analysis for main and test classes') << {
    ant.mkdir(dir: project.ext.scalaStyleReportsDirName)
    javaexec {
        main = 'org.scalastyle.Main'
        classpath = sourceSets.main.runtimeClasspath
        ext.configDir = file("${projectDir}/tools-config/scalastyle/scalaStyle.xml")
        ext.sourceDir = 'src'
        ext.xmlOut = file("$project.ext.scalaStyleReportsDirName/main.xml")
        args '--config',configDir, '--xmlOutput', xmlOut, '--verbose', false, '--warnings', false, sourceDir
    }
}

task distribute(type:Zip, dependsOn: assemble) {
    doFirst {
        ant.mkdir(dir:"$distsBinDirName")
        prepareExecutables()
    }
    from project.ext.distsBinDirName
    from (project.ext.distsTemplateDir) {
        include ('**/*.txt')
    }
    from ("$libsDir") { into ('libs') }
}

def prepareExecutables() {
    def allLibFiles = new File("$libsDir").list().collect { "libs/$it" }
    new File("$distsTemplateDir").list().each { filename ->
        if (filename.startsWith('midas')) {
            def contents = new File("$distsTemplateDir/$filename").text
            new FileWriter("$distsBinDirName/$filename").withWriter { writer ->
                if(filename.endsWith('.sh')) {
                    writer.append contents.replace('%%JAVA_CLASS_PATH%%', allLibFiles.collect({"\$MIDAS_HOME/$it"}).join(":"))
                }
                if(filename.endsWith('.bat')) {
                    writer.append contents.replace('%%JAVA_CLASS_PATH%%', allLibFiles.collect({"%MIDAS_HOME%/$it"}).join(";"))
                }
            }
        }
    }
}

check.dependsOn << ['scalastyle']
build.dependsOn = ['check', 'distribute']