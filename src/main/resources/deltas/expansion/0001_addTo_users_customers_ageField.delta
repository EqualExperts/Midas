/**
 * add Command
 * ===========
 * Add single or multiple fields that can nested or add a nested.
 *
 * Syntax:
 *        db.collection.add('{ "field" : "value" [, ...]}')
 *        db.collection.add("{ 'field' : 'value' [, ...]}")
 *
 * Command argument can either be wrapped in a single or a double quoted String.
 * Like JavaScript, you can use quotes inside a string, as long as they don't match the
 * quotes surrounding the string
 *
 * Examples:
 *        db.collection.add('{ "fieldOne" : "valueOne"}')
 *        db.collection.add('{ "fieldOne" : "valueOne", "nested.fieldTwo" : 2, ... }')
 *        db.collection.add("{ 'fieldOne' : 'valueOne', 'nested' : { 'fieldTwo' : 2}, ... }")
 *        db.collection.add("{ 'arrayField' : ['one', 'two', ...] }")
 *
 * Usage:
 *       See below
 */

/**
 * use Command
 * ===========
 *
 * Use a particular database and that sets the context to that DB, so that all commands
 * appearing after it will look for collections within that DB.  This behavior is
 * same as the use command used on Mongo Shell.
 *
 * Syntax:
 *         use <db>
 *
 * Examples:
 *         use transactions
 *
 * Usage:
 *       See below
 */
//Set context to users db
use users

//Add age field with default value 0 to all documents that do not have one
db.customers.add('{"age" : 0 }')
