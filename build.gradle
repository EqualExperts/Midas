apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'idea'

apply plugin: 'checkstyle' //for java code conventions
apply plugin: 'jdepend' //for dependency analysis
apply plugin: 'findbugs' //for static code analysis
apply plugin: 'pmd'

defaultTasks 'clean', 'build'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

project.ext {
    //App Config
    appConfigUrl = new URL("file:///${projectDir}/AppConfig.groovy")
    appConfig = new ConfigSlurper('configuration').parse(appConfigUrl).configuration
    manifest = appConfig.product.distribution.jar.manifest.details
    project.archivesBaseName = appConfig.product.distribution.name
    previousArchiveName = appConfig.product.distribution.previousArchiveName

    //libs
    mongoDriver = 'org.mongodb:mongo-java-driver:2.11.3'
    groovy = 'org.codehaus.groovy:groovy-all:2.1.8'
    scala = 'org.scala-lang:scala-library:2.10.2'
    junit = 'junit:junit:4.8.1'
    mockito = 'org.mockito:mockito-all:1.9.5'
    specs2 = 'org.specs2:specs2_2.10:2.2.2'
    spock = 'org.spockframework:spock-core:0.7-groovy-2.0'
    slf4j = 'org.slf4j:slf4j-api:1.7.5'
    slf4jSimple = 'org.slf4j:slf4j-simple:1.7.5'

    //for scala style plugin
    scalaStyle = 'org.scalastyle:scalastyle_2.10:0.3.2'
    scalaStyleReportsDirName = "$reporting.baseDir/scalastyle"

    //code coverage lib
    coberturaCoverageReportsDirName = "$reporting.baseDir/cobertura"
    coberturaLineCoverageBaseline = 85
    coberturaBranchCoverageBaseline = 70

    //dependency analysis
    jdepend = 'jdepend:jdepend:2.9.1'

    //Distribution settings
    distsTemplateDir = 'distribution-template'
    distsBinDirName = "$project.distsDir/bin"
    distsZipFileName = "${project.distsDir}/${project.archivesBaseName}.zip"

    //Explode Distributables here
    explodedDir = "$project.buildDir/exploded"

    //Runtime Configurations
    DEFAULT_PORT_PREFIX = 270
    portPrefix = System.getProperty('portPrefix', "$DEFAULT_PORT_PREFIX")

    MIDAS_SERVER = 'localhost'
    midasServer = System.getProperty('midasServer', "$MIDAS_SERVER")

    MONGODB_SERVER = 'localhost'
    mongoDB = System.getProperty('mongoDB', "$MONGODB_SERVER")
}

// Apply External Plugins
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.1.0-SNAPSHOT'
    }
}

apply plugin: 'cobertura'

repositories {
    mavenCentral()
    maven {
        url 'http://code.google.com/p/google-maven-repository'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    compile(project.ext.mongoDriver, project.ext.groovy, project.ext.scala, project.ext.scalaStyle, project.ext.slf4j, project.ext.slf4jSimple)
    testCompile(project.ext.junit, project.ext.specs2, project.ext.mockito, project.ext.spock)
}

jar {
    manifest {
        attributes.putAll(project.ext.manifest)
    }

    doLast {
        copy {
            from (configurations.compile.asPath.split(File.pathSeparator))
            into "$libsDir"
        }
    }
}

//FindBugs Configuration
findbugs {
    toolVersion = '2.0.2'
    reportsDir = file("$reporting.baseDir/findbugs")
    effort = "max"
    reportLevel = "high"
}

tasks.withType(FindBugs) {
    excludeFilter = file("${projectDir}/tools-config/findbugs/excludeFilter.xml")
}

findbugsTest.enabled = false

//CheckStyle Configuration
checkstyle {
   configFile = file("${projectDir}/tools-config/checkstyle/checkstyle.xml")
}

checkstyleTest {
    exclude('**/*/*Specs.java')
}

//Scala Style task
task scalastyle(description: 'Run scalaStyle analysis for main and test classes') << {
    ant.mkdir(dir: project.ext.scalaStyleReportsDirName)
    javaexec {
        main = 'org.scalastyle.Main'
        classpath = sourceSets.main.runtimeClasspath
        ext.configDir = file("${projectDir}/tools-config/scalastyle/scalaStyle.xml")
        ext.sourceDir = 'src'
        ext.xmlOut = file("$project.ext.scalaStyleReportsDirName/main.xml")
        args '--config',configDir, '--xmlOutput', xmlOut, '--verbose', false, '--warnings', false, sourceDir
    }
}

//Cobertura Configuration
cobertura {
    coverageReportDir = file(project.ext.coberturaCoverageReportsDirName)
    cobertura.coverageExcludes = ['.*net.saliman.*']
    totalLineCoverage = 50
    totalBranchCoverage = 80
}

task distribute(type:Zip, dependsOn: assemble) {
    doFirst {
        ant.mkdir(dir:"$distsBinDirName")
        prepareExecutables()
    }
    from project.ext.distsBinDirName
    from (project.ext.distsTemplateDir) {
        include ('**/*.txt')
    }
    from ("$libsDir") { into ('libs') }
}

def prepareExecutables() {
    def allLibFiles = new File("$libsDir").list().collect { "libs/$it" }
    new File("$distsTemplateDir").list().each { filename ->
        if (filename.startsWith('midas')) {
            def contents = new File("$distsTemplateDir/$filename").text
            new FileWriter("$distsBinDirName/$filename").withWriter { writer ->
                if(filename.endsWith('.sh')) {
                    writer.append contents.replace('%%JAVA_CLASS_PATH%%', allLibFiles.collect({"\$MIDAS_HOME/$it"}).join(":"))
                }
                if(filename.endsWith('.bat')) {
                    writer.append contents.replace('%%JAVA_CLASS_PATH%%', allLibFiles.collect({"%MIDAS_HOME%/$it"}).join(";"))
                }
            }
        }
    }
}

task unzip(type: Copy) {
    def zipFile = file("$distsZipFileName")
    def outputDir = file(project.ext.explodedDir)
    from zipTree(zipFile)
    into outputDir
}

task run(description: "Runs $project.archivesBaseName", dependsOn: [distribute, unzip]) << {
    //Run Midas from exploded dir
    def runtimeClasspath = fileTree(dir: "${project.ext.explodedDir}/libs", include: '*.jar')
    runtimeClasspath = runtimeClasspath + fileTree(dir: project.distsDir, include: '*.jar')

    javaexec {
        systemProperties['portPrefix'] = project.ext.portPrefix
        main = 'com.ee.midas.Main'
        classpath = runtimeClasspath
        args = ["$project.ext.midasServer", "${project.ext.portPrefix}20", "${project.ext.mongoDB}", "${project.ext.portPrefix}17"]
    }
}

check.dependsOn << ['scalastyle']
build.dependsOn = ['check', 'cobertura', 'coberturaCheck', 'distribute']
